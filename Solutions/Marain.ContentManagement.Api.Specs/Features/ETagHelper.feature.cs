// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Marain.ContentManagement.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ETagHelper")]
    public partial class ETagHelperFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ETagHelper.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ETagHelper", "\tIn order to generate etags\r\n\tAs a developer\r\n\tI want to use a consistent method " +
                    "of building and verifying tags", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating an etag from a discriminator and single etag always returns the same r" +
            "esult")]
        public virtual void GeneratingAnEtagFromADiscriminatorAndSingleEtagAlwaysReturnsTheSameResult()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating an etag from a discriminator and single etag always returns the same r" +
                    "esult", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 testRunner.Given("I build an etag from discriminator \'Content\' and etag \'\"thisismyetag\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I build an etag from discriminator \'Content\' and etag \'\"thisismyetag\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.Then("the generated etags are the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating etags from the same etag with different discriminators returns differe" +
            "nt results")]
        public virtual void GeneratingEtagsFromTheSameEtagWithDifferentDiscriminatorsReturnsDifferentResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating etags from the same etag with different discriminators returns differe" +
                    "nt results", null, ((string[])(null)));
#line 11
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 12
 testRunner.Given("I build an etag from discriminator \'Content\' and etag \'\"thisismyetag\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.And("I build an etag from discriminator \'ContentSummary\' and etag \'\"thisismyetag\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.Then("the generated etags are distinct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating an etag from a discriminator and list of etags always returns the same" +
            " result")]
        public virtual void GeneratingAnEtagFromADiscriminatorAndListOfEtagsAlwaysReturnsTheSameResult()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating an etag from a discriminator and list of etags always returns the same" +
                    " result", null, ((string[])(null)));
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ETag"});
            table3.AddRow(new string[] {
                        "etag1"});
            table3.AddRow(new string[] {
                        "etag2"});
            table3.AddRow(new string[] {
                        "etag3"});
            table3.AddRow(new string[] {
                        "etag4"});
            table3.AddRow(new string[] {
                        "etag5"});
#line 17
 testRunner.Given("I build an etag from discriminator \'Content\' and a list of etags", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ETag"});
            table4.AddRow(new string[] {
                        "etag1"});
            table4.AddRow(new string[] {
                        "etag2"});
            table4.AddRow(new string[] {
                        "etag3"});
            table4.AddRow(new string[] {
                        "etag4"});
            table4.AddRow(new string[] {
                        "etag5"});
#line 24
 testRunner.And("I build an etag from discriminator \'Content\' and a list of etags", ((string)(null)), table4, "And ");
#line 31
 testRunner.Then("the generated etags are the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating an etag from a discriminator and lists containing the same items in di" +
            "fferent orders returns different results")]
        public virtual void GeneratingAnEtagFromADiscriminatorAndListsContainingTheSameItemsInDifferentOrdersReturnsDifferentResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating an etag from a discriminator and lists containing the same items in di" +
                    "fferent orders returns different results", null, ((string[])(null)));
#line 33
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ETag"});
            table5.AddRow(new string[] {
                        "etag1"});
            table5.AddRow(new string[] {
                        "etag2"});
            table5.AddRow(new string[] {
                        "etag3"});
            table5.AddRow(new string[] {
                        "etag4"});
            table5.AddRow(new string[] {
                        "etag5"});
#line 34
 testRunner.Given("I build an etag from discriminator \'Content\' and a list of etags", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ETag"});
            table6.AddRow(new string[] {
                        "etag2"});
            table6.AddRow(new string[] {
                        "etag3"});
            table6.AddRow(new string[] {
                        "etag4"});
            table6.AddRow(new string[] {
                        "etag5"});
            table6.AddRow(new string[] {
                        "etag1"});
#line 41
 testRunner.And("I build an etag from discriminator \'Content\' and a list of etags", ((string)(null)), table6, "And ");
#line 48
 testRunner.Then("the generated etags are distinct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating an etag from a discriminator and lists containing different items retu" +
            "rns different results")]
        public virtual void GeneratingAnEtagFromADiscriminatorAndListsContainingDifferentItemsReturnsDifferentResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating an etag from a discriminator and lists containing different items retu" +
                    "rns different results", null, ((string[])(null)));
#line 50
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ETag"});
            table7.AddRow(new string[] {
                        "etag1"});
            table7.AddRow(new string[] {
                        "etag2"});
            table7.AddRow(new string[] {
                        "etag3"});
            table7.AddRow(new string[] {
                        "etag4"});
            table7.AddRow(new string[] {
                        "etag5"});
#line 51
 testRunner.Given("I build an etag from discriminator \'Content\' and a list of etags", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ETag"});
            table8.AddRow(new string[] {
                        "etag10"});
            table8.AddRow(new string[] {
                        "etag11"});
#line 58
 testRunner.And("I build an etag from discriminator \'Content\' and a list of etags", ((string)(null)), table8, "And ");
#line 62
 testRunner.Then("the generated etags are distinct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
